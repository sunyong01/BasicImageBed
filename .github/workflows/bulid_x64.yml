name: Build x64

on:
  push:
    branches:
      - master
      - release
      - dev
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

      # Java cache setup
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

      # Node.js cache setup
    - name: Cache Node.js modules
      uses: actions/cache@v4
      with:
        path: ui/node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('ui/package-lock.json', 'ui/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-modules-

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: '9.15.0'

    - name: Install pnpm dependencies
      run: |
        cd ui
        pnpm install

    - name: Build with Gradle
      env:
        USE_CI_REPOS: true
      run: ./gradlew build
      continue-on-error: true  # 允许构建失败继续执行后续步骤

    - name: Upload Problems Report
      if: failure()  # 只在构建失败时执行
      uses: actions/upload-artifact@v4
      with:
        name: problems-report
        path: build/reports/problems/problems-report.html

    - name: Display Problems Report
      if: failure()
      run: |
        if [ -f build/reports/problems/problems-report.html ]; then
          echo "Problems Report Content:"
          echo "===================="
          cat build/reports/problems/problems-report.html
          echo "===================="
        else
          echo "Problems report file not found"
        fi

    - name: Create Release Package
      run: |
        mkdir -p release
        cp bed-web/build/libs/bed-web-*.jar release/app.jar
        cp Dockerfile release/
        cp docker-compose.yml release/
        cd release
        zip -r ../basic-image-bed.zip *

    # 上传构建产物（dev分支）
    - name: Upload Build Artifact
      if: github.ref == 'refs/heads/dev'
      uses: actions/upload-artifact@v4
      with:
        name: basic-image-bed
        path: basic-image-bed.zip
        retention-days: 5

    # 为release分支创建Release
    - name: Generate release tag
      if: github.ref == 'refs/heads/release'
      id: tag
      run: |
        echo "release_tag=release_$(date +'%Y.%m.%d_%H-%M')" >> $GITHUB_OUTPUT

    - name: Release
      if: github.ref == 'refs/heads/release'
      uses: softprops/action-gh-release@v1
      with:
        files: basic-image-bed.zip
        tag_name: ${{ steps.tag.outputs.release_tag }}
