import org.springframework.boot.gradle.plugin.SpringBootPlugin

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.4.0' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'com.github.node-gradle.node' version '3.5.1'
}


// 立即定义 useCiRepos 属性并根据环境变量进行初始化
ext.useCiRepos = System.getenv('USE_CI_REPOS')?.toBoolean() ?: false

allprojects {
    group = 'web.sy'
    version = '0.0.1-SNAPSHOT'

    repositories {
        if (useCiRepos) {
            mavenCentral()
        } else {
            mavenLocal()
            maven { url = uri('https://maven.aliyun.com/repository/public') }
            maven { url = uri('https://repo.huaweicloud.com/repository/maven/') }
            mavenCentral()
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    
    group = 'web.sy'
    version = '0.0.1-SNAPSHOT'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }
    
    repositories {
        mavenLocal()
        maven { url = uri('https://maven.aliyun.com/repository/public') }
        maven { url = uri('https://repo.huaweicloud.com/repository/maven/') }
        mavenCentral()
    }
    
    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
        dependencies {
            dependency 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
        }
    }
    
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
    }
}


tasks.register('npmDev', Exec) {
    workingDir 'ui'
    commandLine 'pnpm', 'dev'
    dependsOn npmInstall
}

tasks.register('npmBuild', Exec) {
    workingDir 'ui'
    commandLine 'pnpm', 'build'
    dependsOn npmInstall
}

// 定义前端目录
def uiDir = "$projectDir/ui"
def staticDir = "$projectDir/bed-web/src/main/resources/static"

// 清理前端构建产物
tasks.register('cleanUi', Delete) {
    delete staticDir
}

// 复制前端构建产物到静态资源目录
tasks.register('copyUi', Copy) {
    dependsOn npmBuild
    from "${uiDir}/dist"
    into staticDir
}

// 定义前端构建任务
def frontendBuild = tasks.register('frontendBuild') {
    dependsOn npmBuild, copyUi
}

// 确保所有子项目的构建依赖前端��建
subprojects {
    afterEvaluate {
        tasks.withType(ProcessResources).configureEach {
            mustRunAfter rootProject.tasks.named('frontendBuild')
        }

        tasks.withType(Jar).tap {
            configureEach {
                mustRunAfter rootProject.tasks.named('frontendBuild')
            }
        }
    }
}

// 修改主构建流程
tasks.named('build') {
    dependsOn frontendBuild
    dependsOn subprojects.collect { it.tasks.named('build') }
}

// 修改clean任务，确保也清理前端构建产物
tasks.named('clean') {
    dependsOn cleanUi
    dependsOn subprojects.collect { it.tasks.named('clean') }
}

// 配置任务顺序
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(':build')) {
        tasks.named('build').configure {
            shouldRunAfter frontendBuild
        }
    }
}

tasks.register('checkDeps', Exec) {
    workingDir 'ui'
    commandLine 'pnpm', 'dlx', 'depcheck'
}